" Vundle {{{1
set nocompatible              " be iMproved, required
filetype off                  " required
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
" calls vundle and set the root installation path for plugins
call vundle#begin('~/.vim/bundles')

"Plugins {{{2
Plugin 'VundleVim/Vundle.vim' "plugin manager
Plugin 'tpope/vim-fugitive' "wrapper for git
Plugin 'Valloric/YouCompleteMe' "code completion
Plugin 'fatih/vim-go' "golang ide
Plugin 'tpope/vim-vinegar' "files browsing
"}}}2

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" }}}


" Configuration files {{{1
let $MYVIMRC = $HOME . '/.vim/vimrc'
let $PPXSET = $HOME . '/.vim/ppx/settings.vim'
let $PPXTMP = $HOME . '/.vim/tmp'

" SETTINGS
source $PPXSET
" }}}


" MAPPINGS {{{1
let mapleader="\\"
let maplocalleader=","

" fast operations on configuration files
nnoremap <leader>ev :sp $MYVIMRC <cr>
nnoremap <leader>es :sp $PPXSET <cr>
nnoremap <leader>sv :source $MYVIMRC <cr>

" Mapping to train
inoremap jk <esc>
inoremap <esc> <nop>
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
nnoremap OA <nop>
nnoremap OB <nop>
nnoremap OC <nop>
nnoremap OD <nop>

" clear search highlight
nnoremap <silent> <leader>/ :nohlsearch <cr>

" easier mappings for moving within splits
nnoremap <c-h> <c-w><c-h>
nnoremap <c-l> <c-w><c-l>
nnoremap <c-j> <c-w><c-j>
nnoremap <c-k> <c-w><c-k>
" switch split vertical
nnoremap <leader>ssv <c-w>t<c-w>H
" switch split orizontal
nnoremap <leader>sso <c-w>t<c-w>K

"" Open browser with url under cursor
nnoremap <leader>gw :!w3m '<cWORD>' .<CR>
" }}}


" AUTOCOMANDS {{{1

augroup vimfile
    autocmd!
    :au FileType vim set foldmethod=marker
augroup END

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  augroup ppx
    au!

    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    autocmd BufReadPost *
      \ if line("'\"") >= 1 && line("'\"") <= line("$") |
      \   exe "normal! g`\"" |
      \ endif

  augroup END

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
" Revert with: ":delcommand DiffOrig".
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif
" }}}


" FUNCTIONS {{{1

" Toggle Windows to max height
function! ToggleFullscreenWindows()
    if &winheight == 1
	let &winheight=9999
	let &winminheight=0
	set noequalalways
    else
	let &winheight=1 
	let &winminheight=0
	set equalalways
    endif
endfunction 

" Toggle Windows to max height
nnoremap <silent> <leader>tf :call ToggleFullscreenWindows()<CR>

" Auto toggle paste
function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()
" }}}

" Source VIP wimscripts
:so $HOME/workspace/vimscript/argument_refactor.vim

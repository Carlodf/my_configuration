"Vundle {{{1
set nocompatible              " be iMproved, required
filetype off                  " required
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
" calls vundle and set the root installation path for plugins
call vundle#begin('~/.vim/bundles')

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

"Plugins {{{2
Plugin 'VundleVim/Vundle.vim' "plugin manager
Plugin 'tpope/vim-fugitive' "wrapper for git
Plugin 'Valloric/YouCompleteMe' "code completion
Plugin 'fatih/vim-go' "golang ide
Plugin 'tpope/vim-vinegar' "files browsing

let $MYVIMRC='~/.vim/vimrc'


" CONFIGURATIONS {{{1

" Specifies when in insert mode backspace can be used
set backspace=indent,eol,start
" Always display the current cursor position in the lower
" right corner
set ruler
" Display an incomplete command in the lower right corner
set showcmd
" Display the match for a search pattern when halfway
" typing it.
set incsearch
" highlight search results
set hlsearch
" maximum number of changes that can be undone
set ul=1000
" automatically save and restore undo history
set udf
" list of directories for undo files
set udir=~/.vim/undo/
" Reset viminfo to default values except for filename
set viminfo='100,<50,s10,h,n~/.vim/viminfo
" Tabs settings
set tabstop=8
set softtabstop=4
set shiftwidth=4
set noexpandtab

" highlight cursor line
set cursorline

" capital K will open vim help instead of shell man
" for the word under the cursor
set keywordprg=:help


" VISUALIZATION SETTINGS {{{1

set background=dark

syntax enable

colorscheme badwolf

" automatically sets the current window to fully expand to
" all the space available if in a split
" set winheight=9999
" set winwidth=9999

" Highlight columns 80 and 120
" highlight ColorColumn ctermbg=150
let &colorcolumn="80,".join(range(120,120),",")


" MAPPINGS {{{1
let mapleader="\\"
let maplocalleader="_"

" fast operations on vimrc file
nnoremap <leader>ev :vsplit $MYVIMRC <cr>
nnoremap <leader>sv :source $MYVIMRC <cr>

" Mapping to train
inoremap jk <esc>
inoremap <esc> <nop>
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
nnoremap OA <nop>
nnoremap OB <nop>
nnoremap OC <nop>
nnoremap OD <nop>

" clear search highlight
nnoremap <silent> <leader>/ :nohlsearch <cr>

" easier mappings for moving within splits
nnoremap <c-h> <c-w><c-h>
nnoremap <c-l> <c-w><c-l>
nnoremap <c-j> <c-w><c-j>
nnoremap <c-k> <c-w><c-k>
" switch split vertical
nnoremap <leader>ssv <c-w>t<c-w>H
" switch split orizontal
nnoremap <leader>sso <c-w>t<c-w>K

"" Open browser with url under cursor
nnoremap <leader>gw :!w3m '<cWORD>' .<CR>
"
"
" AUTOCOMANDS {{{1

augroup vimfile
    autocmd!
    :au FileType vim set foldmethod=marker
augroup END


" FUNCTIONS {{{1

" https://www.google.com


" Toggle Windows to max height
function! ToggleFullscreenWindows()
    if &winheight == 1
	let &winheight=9999
	let &winminheight=0
	set noequalalways
    else
	let &winheight=1 
	let &winminheight=0
	set equalalways
    endif
endfunction 

" Toggle Windows to max height
nnoremap <leader>tf :call ToggleFullscreenWindows()<CR>

" Auto toggle paste
function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()


function! Breaker()
    let s:search_history=@/
    let s:l=line('.')
    let s:c=col('.')
    :execute 'normal! %v%' . "\<Esc>"
    let s:l_pos = getpos('<')
    let s:r_pos = getpos('>')
    :echo(s:r_pos)
    :echo(s:l_pos)
    let @/=s:search_history
    :call cursor(s:l, s:c)
endfunction

function! PpxBrakeToggle(type)
    if a:type ==# 'char'
	normal! `[v`]y
    else
	return
    endif
    echom(@@)
endfunction

nnoremap <leader>bd :set operatorfunc=PpxBrakeToggle<cr>g@
